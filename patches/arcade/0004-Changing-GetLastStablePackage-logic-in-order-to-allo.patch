From 1a46808cbcfe7e2f1dd623fb04d3be2899374808 Mon Sep 17 00:00:00 2001
From: Jose Perez Rodriguez <joperezr@microsoft.com>
Date: Fri, 23 Aug 2019 08:55:57 -0700
Subject: [PATCH 4/4] Changing GetLastStablePackage logic in order to allow
 excluding same era packages (#3717)

* Changing GetLastStablePackage logic in order to allow excluding same era packages

* Address PR feedback

* More PR Feedback
---
 .../src/GetLastStablePackage.cs               | 15 +++-
 .../src/VersionUtility.cs                     | 19 +++++
 .../src/build/Packaging.targets               | 13 +++-
 .../tests/GetLastStablePackageTests.cs        | 74 +++++++++++++++++++
 4 files changed, 114 insertions(+), 7 deletions(-)

diff --git a/src/Microsoft.DotNet.Build.Tasks.Packaging/src/GetLastStablePackage.cs b/src/Microsoft.DotNet.Build.Tasks.Packaging/src/GetLastStablePackage.cs
index e467614a..c15c1ae3 100644
--- a/src/Microsoft.DotNet.Build.Tasks.Packaging/src/GetLastStablePackage.cs
+++ b/src/Microsoft.DotNet.Build.Tasks.Packaging/src/GetLastStablePackage.cs
@@ -1,9 +1,10 @@
-ï»¿using Microsoft.Build.Framework;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 using NuGet.Versioning;
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using System.Runtime.CompilerServices;
 using System.Text;
 using System.Threading.Tasks;
 
@@ -31,7 +32,14 @@ public class GetLastStablePackage : BuildTask
         /// Package index files used to define stable packages.
         /// </summary>
         public ITaskItem[] PackageIndexes { get; set; }
+
+        /// <summary>
+        /// <see langword="true"/> if the result version can be a version from the same release.
+        /// <see langword="false"/> otherwise. Defaults to false.
+        /// </summary>
+        public bool DoNotAllowVersionsFromSameRelease { get; set; }
         
+
         /// <summary>
         /// Latest version from StablePackages for all packages in LatestPackages.
         /// If a version isn't found for an item in LatestPackage that will not be included in this set.
@@ -131,13 +139,12 @@ public void GetLastStablePackagesFromIndex()
                     Log.LogMessage($"Could not parse version {versionString} for LatestPackage {packageId}, will use latest stable.");
                 }
 
-                var latestVersion = nuGetVersion?.Version;
+                var latestVersion = (DoNotAllowVersionsFromSameRelease) ? VersionUtility.As2PartVersion(nuGetVersion?.Version) : nuGetVersion?.Version;
 
                 PackageInfo info;
                 if (index.Packages.TryGetValue(packageId, out info))
                 {
-                    var candidateVersions = (latestVersion == null) ? info.StableVersions : info.StableVersions.Where(sv => VersionUtility.As4PartVersion(sv) < latestVersion);
-
+                    IEnumerable<Version> candidateVersions = (latestVersion == null) ? info.StableVersions : info.StableVersions.Where(sv => VersionUtility.As4PartVersion(sv) < latestVersion);
                     if (candidateVersions.Any())
                     {
                         lastStablePackages.Add(CreateItem(latestPackage, candidateVersions.Max()));
diff --git a/src/Microsoft.DotNet.Build.Tasks.Packaging/src/VersionUtility.cs b/src/Microsoft.DotNet.Build.Tasks.Packaging/src/VersionUtility.cs
index 4432c1b3..a655295c 100644
--- a/src/Microsoft.DotNet.Build.Tasks.Packaging/src/VersionUtility.cs
+++ b/src/Microsoft.DotNet.Build.Tasks.Packaging/src/VersionUtility.cs
@@ -57,6 +57,9 @@ public static Version GetAssemblyVersion(Stream assemblyStream)
 
         public static Version As3PartVersion(Version version)
         {
+            if (version == null)
+                return null;
+
             int build = version.Build;
 
             if (build == -1)
@@ -73,8 +76,24 @@ public static Version As3PartVersion(Version version)
             return new Version(version.Major, version.Minor, build);
         }
 
+        public static Version As2PartVersion(Version version)
+        {
+            if (version == null)
+                return null;
+
+            if (version.Build == -1)
+            {
+                // we already have a 2-part version
+                return version;
+            }
+            return new Version(version.Major, version.Minor);
+        }
+
         public static Version As4PartVersion(Version version)
         {
+            if (version == null)
+                return null;
+
             int build = version.Build, revision = version.Revision;
 
             if (build == -1)
diff --git a/src/Microsoft.DotNet.Build.Tasks.Packaging/src/build/Packaging.targets b/src/Microsoft.DotNet.Build.Tasks.Packaging/src/build/Packaging.targets
index 06d45eff..156dbcd3 100644
--- a/src/Microsoft.DotNet.Build.Tasks.Packaging/src/build/Packaging.targets
+++ b/src/Microsoft.DotNet.Build.Tasks.Packaging/src/build/Packaging.targets
@@ -380,11 +380,16 @@
       <_latestRuntimePackages Include="@(PkgProjDependency)" Condition="'%(PkgProjDependency.TargetRuntime)' != ''" KeepDuplicates="false" />
     </ItemGroup>
 
+    <PropertyGroup>
+      <DoNotAllowVersionsFromSameRelease Condition="'$(DoNotAllowVersionsFromSameRelease)' == ''">true</DoNotAllowVersionsFromSameRelease>
+    </PropertyGroup>
+
     <!-- Calculate the package version to harvest -->
     <GetLastStablePackage Condition="'$(HarvestVersion)' == ''"
                           LatestPackages="@(_latestPackage)"
                           StablePackages="@(StablePackage)"
-                          PackageIndexes="@(PackageIndex)">
+                          PackageIndexes="@(PackageIndex)"
+                          DoNotAllowVersionsFromSameRelease="$(DoNotAllowVersionsFromSameRelease)">
       <Output  TaskParameter="LastStablePackages" ItemName="_lastStablePackage"/>
     </GetLastStablePackage>
 
@@ -396,14 +401,16 @@
     <GetLastStablePackage Condition="'@(HarvestRuntimePackages)' == ''"
                           LatestPackages="@(_latestRuntimePackages)"
                           StablePackages="@(StablePackage)"
-                          PackageIndexes="@(PackageIndex)">
+                          PackageIndexes="@(PackageIndex)"
+                          DoNotAllowVersionsFromSameRelease="$(DoNotAllowVersionsFromSameRelease)">
       <Output  TaskParameter="LastStablePackages" ItemName="HarvestRuntimePackages"/>
     </GetLastStablePackage>
 
     <GetLastStablePackage Condition="'@(HarvestAdditionalPackageIds)' != ''"
                           LatestPackages="@(HarvestAdditionalPackageIds)"
                           StablePackages="@(StablePackage)"
-                          PackageIndexes="@(PackageIndex)">
+                          PackageIndexes="@(PackageIndex)"
+                          DoNotAllowVersionsFromSameRelease="$(DoNotAllowVersionsFromSameRelease)">
       <Output  TaskParameter="LastStablePackages" ItemName="HarvestAdditionalPackages"/>
     </GetLastStablePackage>
 
diff --git a/src/Microsoft.DotNet.Build.Tasks.Packaging/tests/GetLastStablePackageTests.cs b/src/Microsoft.DotNet.Build.Tasks.Packaging/tests/GetLastStablePackageTests.cs
index aea43be5..3c818239 100644
--- a/src/Microsoft.DotNet.Build.Tasks.Packaging/tests/GetLastStablePackageTests.cs
+++ b/src/Microsoft.DotNet.Build.Tasks.Packaging/tests/GetLastStablePackageTests.cs
@@ -117,6 +117,80 @@ public void PriorToStableGetsNothing()
             Assert.Equal(0, task.LastStablePackages.Length);
         }
 
+        [Fact]
+        public void DoNotAllowSameReleasePackageVersions()
+        {
+            ITaskItem[] latestPackages = new[]
+            {
+                CreateItem("StableVersionTest", "1.1.1-pre")
+            };
+
+            GetLastStablePackage task = new GetLastStablePackage()
+            {
+                BuildEngine = _engine,
+                PackageIndexes = _packageIndexes,
+                LatestPackages = latestPackages,
+                DoNotAllowVersionsFromSameRelease = true
+            };
+
+            _log.Reset();
+            task.Execute();
+            Assert.Equal(0, _log.ErrorsLogged);
+            Assert.Equal(0, _log.WarningsLogged);
+            Assert.Equal(task.LatestPackages.Length, task.LastStablePackages.Length);
+            Assert.Equal("StableVersionTest", task.LastStablePackages[0].ItemSpec);
+            Assert.Equal("1.0.0", task.LastStablePackages[0].GetMetadata("Version"));
+        }
+
+        [Fact]
+        public void NullVersionShouldUseLatestStableVersion()
+        {
+            ITaskItem[] latestPackages = new[]
+            {
+                CreateItem("StableVersionTest", null)
+            };
+
+            GetLastStablePackage task = new GetLastStablePackage()
+            {
+                BuildEngine = _engine,
+                PackageIndexes = _packageIndexes,
+                LatestPackages = latestPackages,
+                DoNotAllowVersionsFromSameRelease = true
+            };
+
+            _log.Reset();
+            task.Execute();
+            Assert.Equal(0, _log.ErrorsLogged);
+            Assert.Equal(0, _log.WarningsLogged);
+            Assert.Equal(task.LatestPackages.Length, task.LastStablePackages.Length);
+            Assert.Equal("StableVersionTest", task.LastStablePackages[0].ItemSpec);
+            Assert.Equal("1.1.0", task.LastStablePackages[0].GetMetadata("Version"));
+        }
+
+        [Fact]
+        public void AllowSameReleasePackageVersions()
+        {
+            ITaskItem[] latestPackages = new[]
+            {
+                CreateItem("StableVersionTest", "1.1.1-pre")
+            };
+
+            GetLastStablePackage task = new GetLastStablePackage()
+            {
+                BuildEngine = _engine,
+                PackageIndexes = _packageIndexes,
+                LatestPackages = latestPackages
+            };
+
+            _log.Reset();
+            task.Execute();
+            Assert.Equal(0, _log.ErrorsLogged);
+            Assert.Equal(0, _log.WarningsLogged);
+            Assert.Equal(task.LatestPackages.Length, task.LastStablePackages.Length);
+            Assert.Equal("StableVersionTest", task.LastStablePackages[0].ItemSpec);
+            Assert.Equal("1.1.0", task.LastStablePackages[0].GetMetadata("Version"));
+        }
+
         private static ITaskItem CreateItem(string name, string version)
         {
             TaskItem item = new TaskItem(name);
-- 
2.21.0

